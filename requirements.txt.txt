  Maritime Incident Web Application Portal - Requirements Document

   Table of Contents
1. [Introduction]( introduction)
2. [Purpose]( purpose)
3. [Stakeholders and Users]( stakeholders-and-users)
4. [Functional Requirements]( functional-requirements)
   - [User Authentication]( user-authentication)
   - [User Roles and Permissions]( user-roles-and-permissions)
   - [Ship Information Management]( ship-information-management)
   - [Incident Reporting and Management]( incident-reporting-and-management)
   - [Alert and Notification System]( alert-and-notification-system)
   - [Incident Status Tracking]( incident-status-tracking)
   - [Emergency Service Request Handling]( emergency-service-request-handling)
   - [Data Collection, Storage, and Retrieval]( data-collection-storage-and-retrieval)
   - [Data Analytics and Compliance Auditing]( data-analytics-and-compliance-auditing)
   - [Weather and Environmental Data Integration]( weather-and-environmental-data-integration)
   - [Emergency Service Integration]( emergency-service-integration)
5. [Non-Functional Requirements]( non-functional-requirements)
   - [Performance]( performance)
   - [Security]( security)
   - [Usability]( usability)
   - [Scalability]( scalability)
   - [Maintainability]( maintainability)
6. [Database Design]( database-design)
   - [Entity-Relationship Diagram]( entity-relationship-diagram)
   - [Database Tables]( database-tables)
7. [Technology Stack]( technology-stack)
8. [User Interface Design]( user-interface-design)
9. [Security Requirements]( security-requirements)
10. [Appendix]( appendix)

---

   Introduction

This document outlines the requirements for developing a Maritime Incident Web Application Portal. The portal aims to facilitate the reporting, management, and tracking of maritime incidents by various stakeholders, including fire services, maritime police, first responders, and ship captains. The application will integrate essential features such as user authentication, incident reporting, alert systems, emergency service integration, and data analytics.

   Purpose

The primary purpose of this web application is to provide a centralized platform for managing maritime incidents. It enables efficient reporting, real-time tracking, and coordination among various emergency services. Additionally, it offers data analytics capabilities for auditing compliance and improving response strategies.

   Stakeholders and Users

    Primary Stakeholders
-   Fire Services  : Respond to maritime fires and related emergencies.
-   Maritime Police  : Handle law enforcement and security-related incidents.
-   First Responders  : Provide immediate assistance during emergencies.
-   Ship Captains  : Report incidents and access relevant information.
-   Emergency Service Coordinators  : Manage and coordinate responses.
-   System Administrators  : Maintain the portal and manage user accounts.

    Potential Additional Users
-   Port Authorities  : Oversee port operations and safety.
-   Environmental Agencies  : Monitor environmental impacts of incidents.
-   Insurance Companies  : Assess claims related to maritime incidents.
-   Logistics Managers  : Coordinate ship movements and incident responses.
-   Data Analysts  : Perform analytics on incident data for insights.

   Functional Requirements

    User Authentication

     Features:
-   Sign Up  : New users can create accounts by providing necessary details.
-   Login  : Registered users can access the portal using their credentials.
-   Password Management  : Users can reset or change passwords securely.
-   Role-Based Access Control  : Different access levels based on user roles.

     Components:
-   Registration Form  : Collects user information (name, email, password, role).
-   Login Form  : Authenticates users using email and password.
-   Password Recovery  : Allows users to recover access via email verification.
-   Session Management  : Maintains user sessions securely.

    User Roles and Permissions

     Roles:
-   Admin  : Full access to all features and settings.
-   Fire Service Personnel  : Access to fire-related incident reports and management tools.
-   Maritime Police  : Manage security-related incidents.
-   First Responders  : Access to general incident reports and response tools.
-   Ship Captain  : Report incidents and view their status.
-   Data Analyst  : Access to data analytics dashboards and reports.

     Permissions:
-   Admins  : Manage users, configure system settings, view all incidents.
-   Fire Services  : View and manage fire-related incidents, respond to alerts.
-   Maritime Police  : Handle security incidents, access related reports.
-   First Responders  : Respond to general incidents, update statuses.
-   Ship Captains  : Submit incident reports, view status of their reports.
-   Data Analysts  : Access anonymized data for analysis, generate reports.

    Ship Information Management

     Features:
-   Ship Registration  : Add and manage ship details.
-   Ship Details  : Store comprehensive information about each ship.

     Ship Details Include:
-   Ship ID  : Unique identifier for each ship.
-   Ship Name  : Official name of the ship.
-   Arriving From  : Origin port or location.
-   Destination  : Destination port or location.
-   Content  : Description of cargo or passengers.
-   Vessel Type  : Type of ship (cargo, tanker, passenger, etc.).
-   IMO Number  : International Maritime Organization number.
-   Flag State  : Country of registration.
-   Capacity  : Cargo or passenger capacity.

    Incident Reporting and Management

     Features:
-   Incident Submission  : Users can report incidents with detailed information.
-   Incident Details  : Capture comprehensive data about each incident.
-   Incident Categorization  : Classify incidents based on type (fire, collision, piracy, etc.).
-   Incident Assignment  : Assign incidents to relevant responders or departments.

     Incident Details Include:
-   Incident ID  : Unique identifier for each incident.
-   Reported By  : User who reported the incident.
-   Ship ID  : Associated ship involved in the incident.
-   Date and Time  : When the incident occurred.
-   Location  : Geographical location of the incident.
-   Description  : Detailed description of the incident.
-   Severity Level  : Assessment of the incident's severity.
-   Attachments  : Photos, videos, or documents related to the incident.

    Alert and Notification System

     Features:
-   Real-Time Alerts  : Notify relevant users about new incidents.
-   Notification Channels  : Email, SMS, in-app notifications.
-   Customizable Alerts  : Users can set preferences for the types of alerts they receive.
-   Escalation Procedures  : Automatically escalate alerts based on severity or response time.

    Incident Status Tracking

     Features:
-   Status Updates  : Track the progress of incident resolution.
-   Milestone Tracking  : Key actions taken during incident management.
-   Historical Logs  : Record of all status changes and actions.
-   Dashboard View  : Visual representation of incident statuses for quick overview.

    Emergency Service Request Handling

     Features:
-   Service Requests  : Users can request specific emergency services (fire, medical, etc.).
-   Resource Allocation  : Assign appropriate resources to handle requests.
-   Response Tracking  : Monitor the status of service requests from initiation to resolution.
-   Coordination Tools  : Facilitate communication among different emergency services.

    Data Collection, Storage, and Retrieval

     Features:
-   Data Entry Forms  : Structured forms for consistent data collection.
-   Database Storage  : Secure and organized storage of all application data.
-   Search and Filter  : Advanced search and filtering capabilities to retrieve specific data.
-   Export Options  : Ability to export data in various formats (CSV, PDF).

    Data Analytics and Compliance Auditing

     Features:
-   Analytics Dashboards  : Visualize data trends and insights.
-   Reporting Tools  : Generate reports on incidents, responses, and performance metrics.
-   Compliance Logs  : Maintain logs to ensure adherence to maritime regulations.
-   Audit Trails  : Track user actions and changes within the system for accountability.

    Weather and Environmental Data Integration

     Features:
-   Weather API Integration  : Fetch real-time weather data relevant to ship locations.
-   Environmental Monitoring  : Track environmental factors affecting maritime operations.
-   Predictive Alerts  : Provide warnings based on weather forecasts and environmental data.
-   Historical Data Access  : Access past weather and environmental data for analysis.

    Emergency Service Integration

     Features:
-   Service APIs  : Integrate with external services like fire departments, coast guards, hospitals.
-   Contact Management  : Maintain a database of emergency service contacts.
-   Automated Dispatch  : Automatically notify and dispatch services based on incident type.
-   Communication Tools  : Facilitate direct communication between the portal and emergency services.

   Non-Functional Requirements

    Performance
-   Response Time  : The portal should respond to user actions within 2 seconds.
-   Scalability  : Handle increasing numbers of users and data without performance degradation.
-   Availability  : 99.9% uptime to ensure reliability.

    Security
-   Data Encryption  : Encrypt sensitive data both in transit and at rest.
-   Access Control  : Implement strict role-based access controls.
-   Data Privacy  : Comply with data protection regulations to safeguard user information.
-   Regular Audits  : Conduct security audits to identify and mitigate vulnerabilities.

    Usability
-   User-Friendly Interface  : Intuitive design for ease of use across all user roles.
-   Accessibility  : Ensure the portal is accessible to users with disabilities.
-   Responsive Design  : Compatible with various devices and screen sizes.

    Scalability
-   Modular Architecture  : Design the system to easily add new features and scale resources.
-   Database Optimization  : Efficient database queries to handle large datasets.

    Maintainability
-   Clean Codebase  : Follow best coding practices for easy maintenance and updates.
-   Documentation  : Comprehensive documentation for developers and users.
-   Version Control  : Use version control systems to manage code changes.

   Database Design

    Entity-Relationship Diagram

 (Note: Since this is a text-based document, a descriptive ER diagram is provided.) 

  Entities:  
- Users
- Roles
- Ships
- Incidents
- Notifications
- Services
- WeatherData
- ComplianceLogs

  Relationships:  
- Users belong to Roles.
- Users can report Incidents.
- Incidents are associated with Ships.
- Incidents trigger Notifications.
- Services respond to Incidents.
- WeatherData is linked to Incidents based on location and time.
- ComplianceLogs track actions related to Incidents and Users.

Name of Databas is Maritime
    Database Tables

     1. Users
| Field Name      | Data Type        | Constraints                | Description                        |
|-----------------|-------------------|----------------------------|------------------------------------|
| user_id         | INT AUTO_INCREMENT | PRIMARY KEY               | Unique identifier for each user    |
| username        | VARCHAR(50)       | UNIQUE, NOT NULL           | Username for login                 |
| email           | VARCHAR(100)      | UNIQUE, NOT NULL           | User's email address               |
| password_hash   | VARCHAR(255)      | NOT NULL                   | Hashed password                    |
| role_id         | INT               | FOREIGN KEY -> Roles(role_id) | User's role                      |
| created_at      | DATETIME          | DEFAULT CURRENT_TIMESTAMP | Account creation timestamp         |
| updated_at      | DATETIME          | ON UPDATE CURRENT_TIMESTAMP | Last update timestamp            |

     2. Roles
| Field Name      | Data Type        | Constraints                | Description                        |
|-----------------|-------------------|----------------------------|------------------------------------|
| role_id         | INT AUTO_INCREMENT | PRIMARY KEY               | Unique identifier for each role    |
| role_name       | VARCHAR(50)       | UNIQUE, NOT NULL           | Name of the role (e.g., Admin)     |
| description     | TEXT              |                            | Description of role permissions    |

     3. Ships
| Field Name      | Data Type        | Constraints                | Description                        |
|-----------------|-------------------|----------------------------|------------------------------------|
| ship_id         | INT AUTO_INCREMENT | PRIMARY KEY               | Unique identifier for each ship    |
| ship_name       | VARCHAR(100)      | NOT NULL                   | Official name of the ship          |
| imo_number      | VARCHAR(50)       | UNIQUE, NOT NULL           | International Maritime Organization number |
| flag_state      | VARCHAR(100)      | NOT NULL                   | Country of registration            |
| vessel_type     | VARCHAR(50)       | NOT NULL                   | Type of ship (cargo, tanker, etc.) |
| capacity        | VARCHAR(50)       |                            | Cargo or passenger capacity        |
| arriving_from   | VARCHAR(100)      | NOT NULL                   | Origin port or location            |
| destination     | VARCHAR(100)      | NOT NULL                   | Destination port or location       |
| content         | TEXT              |                            | Description of cargo or passengers |
| created_at      | DATETIME          | DEFAULT CURRENT_TIMESTAMP | Record creation timestamp          |
| updated_at      | DATETIME          | ON UPDATE CURRENT_TIMESTAMP | Last update timestamp            |

     4. Incidents
| Field Name      | Data Type        | Constraints                | Description                        |
|-----------------|-------------------|----------------------------|------------------------------------|
| incident_id     | INT AUTO_INCREMENT | PRIMARY KEY               | Unique identifier for each incident|
| reported_by     | INT               | FOREIGN KEY -> Users(user_id) | User who reported the incident    |
| ship_id         | INT               | FOREIGN KEY -> Ships(ship_id) | Associated ship                  |
| incident_type   | VARCHAR(50)       | NOT NULL                   | Type of incident (fire, collision, etc.) |
| description     | TEXT              | NOT NULL                   | Detailed description of the incident |
| severity_level  | VARCHAR(20)       | NOT NULL                   | Severity assessment                |
| location        | VARCHAR(255)      | NOT NULL                   | Geographical location              |
| date_time       | DATETIME          | NOT NULL                   | When the incident occurred         |
| status          | VARCHAR(50)       | NOT NULL                   | Current status (reported, in progress, resolved) |
| attachments     | TEXT              |                            | Links to related files (JSON array)|
| created_at      | DATETIME          | DEFAULT CURRENT_TIMESTAMP | Record creation timestamp          |
| updated_at      | DATETIME          | ON UPDATE CURRENT_TIMESTAMP | Last update timestamp            |

     5. Notifications
| Field Name      | Data Type        | Constraints                | Description                        |
|-----------------|-------------------|----------------------------|------------------------------------|
| notification_id | INT AUTO_INCREMENT | PRIMARY KEY               | Unique identifier for each notification |
| incident_id     | INT               | FOREIGN KEY -> Incidents(incident_id) | Associated incident          |
| user_id         | INT               | FOREIGN KEY -> Users(user_id) | User to be notified             |
| message         | TEXT              | NOT NULL                   | Notification message               |
| type            | VARCHAR(50)       | NOT NULL                   | Type of notification (alert, update) |
| is_read         | BOOLEAN           | DEFAULT FALSE              | Read status of the notification    |
| created_at      | DATETIME          | DEFAULT CURRENT_TIMESTAMP | Notification creation timestamp    |

     6. Services
| Field Name      | Data Type        | Constraints                | Description                        |
|-----------------|-------------------|----------------------------|------------------------------------|
| service_id      | INT AUTO_INCREMENT | PRIMARY KEY               | Unique identifier for each service |
| service_name    | VARCHAR(100)      | NOT NULL                   | Name of the emergency service (Fire Department, Coast Guard, Hospital) |
| contact_info    | VARCHAR(255)      |                            | Contact details (phone, email)     |
| availability     | BOOLEAN          | DEFAULT TRUE               | Service availability status        |
| created_at      | DATETIME          | DEFAULT CURRENT_TIMESTAMP | Record creation timestamp          |
| updated_at      | DATETIME          | ON UPDATE CURRENT_TIMESTAMP | Last update timestamp            |

     7. WeatherData
| Field Name      | Data Type        | Constraints                | Description                        |
|-----------------|-------------------|----------------------------|------------------------------------|
| weather_id      | INT AUTO_INCREMENT | PRIMARY KEY               | Unique identifier for weather data |
| location        | VARCHAR(255)      | NOT NULL                   | Geographical location              |
| temperature     | DECIMAL(5,2)      |                            | Current temperature                 |
| humidity        | DECIMAL(5,2)      |                            | Current humidity percentage         |
| wind_speed      | DECIMAL(5,2)      |                            | Wind speed                         |
| wind_direction   | VARCHAR(50)      |                            | Wind direction                     |
| weather_condition | VARCHAR(100)    |                            | Description (e.g., clear, rain)    |
| timestamp       | DATETIME          | NOT NULL                   | Time of data retrieval             |

     8. ComplianceLogs
| Field Name      | Data Type        | Constraints                | Description                        |
|-----------------|-------------------|----------------------------|------------------------------------|
| log_id          | INT AUTO_INCREMENT | PRIMARY KEY               | Unique identifier for each log entry |
| incident_id     | INT               | FOREIGN KEY -> Incidents(incident_id) | Associated incident          |
| user_id         | INT               | FOREIGN KEY -> Users(user_id) | User who performed the action  |
| action          | VARCHAR(100)      | NOT NULL                   | Description of the action performed |
| timestamp       | DATETIME          | DEFAULT CURRENT_TIMESTAMP | Time when the action was performed |

   Technology Stack

-   Frontend  :
  -   HTML5  : Structure of the web pages.
  -   CSS3  : Styling and responsive design.
  -   JavaScript  : Interactive features and client-side validations.

-   Backend  :
  -   PHP  : Server-side scripting and application logic.
  -   MySQL  : Database management system for data storage.

-   Tools and Libraries  :
  -   Bootstrap  : CSS framework for responsive design.
  -   jQuery  : Simplify JavaScript operations (optional).
  -   PHP Libraries  : For handling authentication, email notifications, etc.
  -   APIs  : Integration with weather data services (e.g., OpenWeatherMap).

   User Interface Design

    Key Pages and Components

1.   Landing Page  :
   - Overview of the portal’s purpose.
   - Navigation links to login and sign-up.

2.   User Registration and Login  :
   - Forms for user sign-up and authentication.
   - Validation messages and error handling.

3.   Dashboard  :
   - Overview of recent incidents, alerts, and notifications.
   - Quick access to reporting and management tools.

4.   Incident Reporting Form  :
   - Structured form to submit new incidents.
   - Fields for all necessary incident details.

5.   Incident Management Page  :
   - List of reported incidents with filtering and sorting options.
   - Detailed view for each incident with status and actions.

6.   Ship Management Page  :
   - List of registered ships with options to add, edit, or delete.
   - Detailed view of ship information.

7.   Notifications Center  :
   - Display of all notifications with read/unread status.
   - Settings to manage notification preferences.

8.   Analytics Dashboard  :
   - Visual charts and graphs displaying incident trends.
   - Export options for reports.

9.   Settings and Profile Management  :
   - User profile details and password management.
   - Role-specific settings and preferences.

    Design Considerations

-   Responsive Design  : Ensure compatibility across desktops, tablets, and mobile devices.
-   Intuitive Navigation  : Clear menus and breadcrumbs for easy navigation.
-   Accessibility  : Compliance with WCAG standards for users with disabilities.
-   Consistent Styling  : Uniform color schemes, fonts, and UI elements across all pages.

   Security Requirements

    Authentication and Authorization
-   Secure Password Storage  : Use hashing algorithms (e.g., bcrypt) to store passwords.
-   Session Security  : Implement secure session handling to prevent hijacking.
-   Role-Based Access Control (RBAC)  : Ensure users can only access functionalities permitted by their roles.

    Data Protection
-   Encryption  : Encrypt sensitive data in the database and during transmission (HTTPS).
-   Input Validation  : Protect against SQL injection, XSS, and other common vulnerabilities.
-   Regular Backups  : Maintain regular backups of the database to prevent data loss.

    Monitoring and Logging
-   Audit Trails  : Keep detailed logs of user activities and system changes.
-   Intrusion Detection  : Monitor for suspicious activities and unauthorized access attempts.
-   Error Handling  : Gracefully handle errors without exposing sensitive information.

   Appendix

    Glossary
-   RBAC  : Role-Based Access Control.
-   API  : Application Programming Interface.
-   XSS  : Cross-Site Scripting.
-   SQL Injection  : A code injection technique that might destroy your database.
-   WCAG  : Web Content Accessibility Guidelines.

user 1- jaymarine jaymarine12345

Vessel Name: Pacific Voyager
IMO Number: 9765432
Vessel Type: Tanker
Flag State: Singapore
Gross Tonnage: 85000.00
Year Built: 2020
Classification Society: American Bureau of Shipping

CREATE TABLE vessels (
    vessel_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    vessel_name VARCHAR(100) NOT NULL,
    imo_number VARCHAR(20) UNIQUE NOT NULL,
    vessel_type VARCHAR(50) NOT NULL,
    flag_state VARCHAR(50) NOT NULL,
    gross_tonnage DECIMAL(10,2),
    year_built INT,
    classification_society VARCHAR(100),
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_inspection_date DATE,
    status ENUM('active', 'in_port', 'maintenance', 'inactive') DEFAULT 'active',
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
vessels
ALTER TABLE vessels 
ADD COLUMN location ENUM('at_sea', 'in_port') DEFAULT NULL;

CREATE TABLE vessel_compliance (
    compliance_id INT AUTO_INCREMENT PRIMARY KEY,
    vessel_id INT,
    user_id INT,
    safety_equipment_check BOOLEAN DEFAULT FALSE,
    navigation_systems_check BOOLEAN DEFAULT FALSE,
    crew_certification_check BOOLEAN DEFAULT FALSE,
    environmental_compliance BOOLEAN DEFAULT FALSE,
    hull_integrity_check BOOLEAN DEFAULT FALSE,
    firefighting_equipment BOOLEAN DEFAULT FALSE,
    medical_supplies_check BOOLEAN DEFAULT FALSE,
    radio_equipment_check BOOLEAN DEFAULT FALSE,
    waste_management_check BOOLEAN DEFAULT FALSE,
    security_systems_check BOOLEAN DEFAULT FALSE,
    last_checked DATETIME,
    next_check_due DATETIME,
    FOREIGN KEY (vessel_id) REFERENCES vessels(vessel_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE TABLE incidents (
    incident_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    vessel_id INT,
    incident_type VARCHAR(100),
    severity_level ENUM('low', 'medium', 'high', 'critical'),
    location VARCHAR(255),
    description TEXT,
    date_time DATETIME,
    status ENUM('reported', 'investigating', 'resolved', 'closed'),
    attachments TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (vessel_id) REFERENCES vessels(vessel_id)
);

CREATE TABLE response_teams (
    team_id INT AUTO_INCREMENT PRIMARY KEY,
    team_name VARCHAR(100) NOT NULL,
    team_type ENUM('fire_service', 'maritime_police', 'first_responders', 'environmental', 'medical') NOT NULL,
    contact_info VARCHAR(255),
    status ENUM('active', 'inactive') DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE incident_assignments (
    assignment_id INT AUTO_INCREMENT PRIMARY KEY,
    incident_id INT,
    team_id INT,
    assigned_at DATETIME,
    status ENUM('assigned', 'responding', 'completed') DEFAULT 'assigned',
    notes TEXT,
    FOREIGN KEY (incident_id) REFERENCES incidents(incident_id),
    FOREIGN KEY (team_id) REFERENCES response_teams(team_id)
);

-- Insert default response teams
INSERT INTO response_teams (team_name, team_type) VALUES
('Fire Service Team', 'fire_service'),
('Maritime Police Unit', 'maritime_police'),
('First Responders Team', 'first_responders'),
('Environmental Response Team', 'environmental'),
('Medical Emergency Team', 'medical');


npm install chart.js
composer require dompdf/dompdf

